{"version":3,"sources":["CodeMirror.tsx","Util.ts","Plot/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["require","CodeMirror","handleChange","cm","props","onChange","getValue","handleKeyDown","event","onKeyDown","container","codeMirror","this","CodeMirrorInstance","value","options","on","nextProps","val","setValue","className","ref","e","React","stringToHSL","string","saturation","light","s","h","i","length","Math","imul","charCodeAt","hashCode","clamp","min","max","interpolate","x","x0","x1","y0","y1","windowedData","data","window","start","floor","end","ceil","slice","drawPlotLine","canvas","ctx","line","dataMin","yMin","reduce","p","dataRange","yMax","canvasCoord","width","height","beginPath","moveTo","strokeStyle","color","label","lineTo","stroke","Plot","lines","title","dataCanvas","uiCanvas","windowStack","setWindowStack","hidden","setHidden","hover","setHover","setHoverThrottled","lodash","throttle","windowPreview","setWindowPreview","current","getContext","clearRect","last","undefined","fillStyle","fillRect","canvasSize","onMouseMove","b","target","getBoundingClientRect","clientX","left","onMouseOut","onMouseDown","windowStart","getWindow","windowEnd","handleMouseMove","preventDefault","stopPropagation","document","addEventListener","handleMouseUp","lastWindow","removeEventListener","onClick","map","key","style","opacity","array","index","a2","arrayReplaceIndex","round","App","useState","setData","source","setSource","error","setError","newSource","result","Function","ex","message","Array","isArray","theme","mode","lineNumbers","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"iUAQAA,EAAQ,IAUD,IAAMC,EAAb,4MAgBEC,aAAe,SAACC,GACV,EAAKC,MAAMC,UACb,EAAKD,MAAMC,SAASF,EAAGG,aAlB7B,EAqBEC,cAAgB,SAACJ,EAA+BK,GAC1C,EAAKJ,MAAMK,WACb,EAAKL,MAAMK,UAAUD,IAvB3B,EA0BEE,UAAmC,KA1BrC,EA2BEC,gBA3BF,oEAEI,GAAKC,KAAKF,UAAV,CAGA,IAAMP,EAAKU,IAAmBD,KAAKF,UAAN,aAAmBI,MAAOF,KAAKR,MAAMU,OAAS,IAAOF,KAAKR,MAAMW,UAC7FZ,EAAGa,GAAG,SAAUJ,KAAKV,cACrBC,EAAGa,GAAG,UAAWJ,KAAKL,eACtBK,KAAKD,WAAaR,KARtB,gDAU4Bc,GACxB,IAAMC,EAAMD,EAAUH,OAAS,GAC3BF,KAAKD,YAAcC,KAAKD,WAAWL,aAAeY,GACpDN,KAAKD,WAAWQ,SAASD,KAb/B,4CA4BwBD,GACpB,OAAOA,EAAUG,YAAcR,KAAKR,MAAMgB,YA7B9C,+BA+BY,IAAD,OACP,OAAO,uBAAKA,UAAWR,KAAKR,MAAMgB,UAAWC,IAAK,SAAAC,GAAC,OAAI,EAAKZ,UAAYY,SAhC5E,GAAgCC,a,uCCNzB,SAASC,EAAYC,EAAgBC,EAAoBC,GAC9D,MAAM,OAAN,OAXK,SAAkBC,GAEvB,IADA,IAAIC,EAAI,EACAC,EAAI,EAAGA,EAAIF,EAAEG,OAAQD,IAE3BD,EAAIG,KAAKC,KAAK,GAAIJ,GAAKD,EAAEM,WAAWJ,GAAK,EAG3C,OAAOD,EAIOM,CAASV,GAAU,IAAjC,aAAyC,IAAIC,EAA7C,cAA6D,IAAIC,EAAjE,MAqBK,SAASS,EAAMtB,EAAeuB,EAAaC,GAChD,OAAON,KAAKK,IAAIL,KAAKM,IAAIxB,EAAOuB,GAAMC,GAKjC,SAASC,EAAYC,EAAWC,EAAYC,EAAYC,EAAYC,GAEzE,OAAOD,GADIH,EAAIC,IAAOC,EAAKD,IACVG,EAAKD,GC7BxB,SAASE,EAAaC,EAAgBC,GACpC,GAAIA,EAAQ,CACV,IAAMC,EAAQhB,KAAKiB,MAAMF,EAAO,GAAKD,EAAKf,QACpCmB,EAAMlB,KAAKmB,KAAKJ,EAAO,GAAKD,EAAKf,QACvC,MAAO,CAAEe,KAAMA,EAAKM,MAAMJ,EAAOE,GAAMF,QAAOE,OAE9C,MAAO,CAAEJ,OAAME,MAAO,EAAGE,IAAKJ,EAAKf,QAGvC,SAASsB,EAAaC,EAA2BC,EAA+BC,EAAgBT,GAAiC,IAAD,MAC1HD,EAAOD,EAAaW,EAAKV,KAAMC,GAAQD,KAC3C,GAAoB,IAAhBA,EAAKf,OAAT,CAGA,IAAM0B,EAAO,UAAGD,EAAKE,YAAR,QAAgBZ,EAAKa,QAAO,SAACC,EAAGpB,GAAJ,OAAUR,KAAKK,IAAIuB,EAAGpB,MAEzDqB,GADO,UAAGL,EAAKM,YAAR,QAAgBhB,EAAKa,QAAO,SAACC,EAAGpB,GAAJ,OAAUR,KAAKM,IAAIsB,EAAGpB,OACnCiB,EACtBM,EAAc,SAACjC,EAAWhB,GAG9B,MAAO,CAFGwC,EAAOU,MAAQlC,GAAKgB,EAAKf,OAAS,GAClCuB,EAAOW,OAASX,EAAOW,QAAUnD,EAAQ2C,GAAWI,IAGhEN,EAAIW,YACJX,EAAIY,OAAJ,MAAAZ,EAAG,YAAWQ,EAAY,EAAGjB,EAAK,MAClCS,EAAIa,YAAJ,UAAkBZ,EAAKa,aAAvB,QAAgC7C,EAAYgC,EAAKc,MAAO,GAAK,IAC7D,IAAK,IAAIxC,EAAE,EAAGA,EAAIgB,EAAKf,OAAQD,IAC7ByB,EAAIgB,OAAJ,MAAAhB,EAAG,YAAWQ,EAAYjC,EAAGgB,EAAKhB,MAEpCyB,EAAIiB,UAOC,SAASC,EAAT,GAA4C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MACtBC,EAAarD,cACbsD,EAAWtD,cAF+B,EAGVA,WAA6B,IAHnB,mBAGzCuD,EAHyC,KAG5BC,EAH4B,OAIpBxD,WAA0B,IAJN,mBAIzCyD,EAJyC,KAIjCC,EAJiC,OAKtB1D,aALsB,mBAKzC2D,EALyC,KAKlCC,EALkC,KAM1CC,EAAoB7D,cAAkB8D,IAAOC,SAASH,EAAU,IAAK,CAACA,IAN5B,EAON5D,aAPM,mBAOzCgE,EAPyC,KAO1BC,EAP0B,KAQhDjE,aAAgB,WACd,GAAIqD,EAAWa,QAAS,CACtB,IAAMlC,EAAMqB,EAAWa,QAAQC,WAAW,MAC1CnC,EAAIoC,UAAU,EAAG,EAAGf,EAAWa,QAAQzB,MAAOY,EAAWa,QAAQxB,QACjE,IAAK,IAAInC,EAAE,EAAGA,EAAI4C,EAAM3C,OAAQD,KACZ,IAAdkD,EAAOlD,IACTuB,EAAauB,EAAWa,QAASlC,EAAKmB,EAAM5C,GAAIuD,IAAOO,KAAKd,OAIjE,CAACJ,EAAOI,EAAaE,IACxBzD,aAAgB,WACd,GAAIsD,EAASY,QAAS,CACpB,IAAMlC,EAAMsB,EAASY,QAAQC,WAAW,MACxCnC,EAAIoC,UAAU,EAAG,EAAGd,EAASY,QAAQzB,MAAOa,EAASY,QAAQxB,aAC/C4B,IAAVX,IACF3B,EAAIW,YACJX,EAAIa,YAAc,2BAClBb,EAAIY,OAAOe,EAAQL,EAASY,QAAQzB,MAAO,GAC3CT,EAAIgB,OAAOW,EAAQL,EAASY,QAAQzB,MAAOa,EAASY,QAAQxB,QAC5DV,EAAIiB,UAEFe,IACFhC,EAAIuC,UAAJ,2BACAvC,EAAIwC,SAASR,EAAc,GAAKV,EAASY,QAAQzB,MAAO,GACrDuB,EAAc,GAAKA,EAAc,IAAMV,EAASY,QAAQzB,MAAOa,EAASY,QAAQxB,YAGtF,CAACiB,EAAOK,IACX,IAAMS,EAAsB,IAAtBA,EAAmC,IACzC,OAAO,uBAAK5E,UAAU,QACnBuD,GAAS,yBAAIA,GACd,uBAAKvD,UAAU,gBACf,0BAAQA,UAAU,iBAAiB4C,MAAOgC,EAAkB/B,OAAQ+B,EAAmB3E,IAAKuD,IAC5F,0BACExD,UAAU,eACV4C,MAAOgC,EACP/B,OAAQ+B,EACR3E,IAAKwD,EACLoB,YAAa,SAAA3E,GACX,IACM4E,EADI5E,EAAE6E,OACAC,wBACZhB,GAAmB9D,EAAE+E,QAAUH,EAAEI,MAAQJ,EAAElC,QAE7CuC,WAAY,SAAAjF,GAAC,OAAI8D,OAAkBS,IACnCW,YAAa,SAAAlF,GACX,IACM4E,EADI5E,EAAE6E,OACAC,wBACNK,GAAenF,EAAE+E,QAAUH,EAAEI,MAAQJ,EAAElC,MAC7CwB,EAAiB,CAACiB,EAAaA,IAC/B,IAAMC,EAAY,SAACpF,GACjB,IAAMqF,EAAYvE,GAAOd,EAAE+E,QAAUH,EAAEI,MAAQJ,EAAElC,MAAO,EAAG,GAC3D,OAAI2C,EAAYF,EACP,CAACE,EAAWF,GAEZ,CAACA,EAAaE,IAGnBC,EAAkB,SAACtF,GACvBA,EAAEuF,iBACFvF,EAAEwF,kBACFtB,EAAiBkB,EAAUpF,KAiB7ByF,SAASC,iBAAiB,WAfJ,SAAhBC,EAAiB3F,GACrB,IAAIyB,EAAS2D,EAAUpF,GACjB4F,EAAa7B,IAAOO,KAAKd,GAE7BC,EADEmC,EACa,GAAD,mBAAKpC,GAAL,CAAkB,CAC9BvC,EAAYQ,EAAO,GAAI,EAAG,EAAGmE,EAAW,GAAIA,EAAW,IACvD3E,EAAYQ,EAAO,GAAI,EAAG,EAAGmE,EAAW,GAAIA,EAAW,OAG1C,CAACnE,IAElByC,OAAiBK,GACjBkB,SAASI,oBAAoB,UAAWF,GACxCF,SAASI,oBAAoB,YAAaP,MAG5CG,SAASC,iBAAiB,YAAaJ,MAGxC9B,EAAY/C,OAAS,GAAK,uBAAKX,UAAU,cACtCgG,QAAS,kBAAMrC,EAAeD,EAAY1B,MAAM,EAAG0B,EAAY/C,OAAS,MADjD,aAK5B2C,EAAM2C,KAAI,SAAC7D,EAAM1B,GAAO,IAAD,EAChBgB,EAAOD,EAAaW,EAAKV,KAAMuC,IAAOO,KAAKd,IACjD,OAAO,uBACLwC,IAAKxF,EACLV,UAAU,iBACVmG,MAAO,CACLlD,MAAK,UAAEb,EAAKa,aAAP,QAAgB7C,EAAYgC,EAAKc,MAAO,GAAK,IAClDkD,QAASxC,EAAOlD,GAAK,QAAM+D,GAE7BuB,QAAS,kBAAMnC,EDxIhB,SAA8BwC,EAAYC,EAAe5G,GAC9D,IAAM6G,EAAE,YAAOF,GAEf,OADAE,EAAGD,GAAS5G,EACL6G,ECqIwBC,CAAkB5C,EAAQlD,GAAIkD,EAAOlD,OAE7D0B,EAAKc,MATD,YAUYuB,IAAVX,EACL,4BAAOlD,KAAK6F,MAAM3C,EAAQpC,EAAKA,KAAKf,QAApC,KAA+Ce,EAAKA,KAAKd,KAAK6F,MAAM3C,EAAQpC,EAAKA,KAAKf,UACpF,gCAAQe,EAAKE,MAAb,IAAqBF,EAAKA,KAAK,GAA/B,UAA0CA,EAAKI,IAAM,EAArD,IAAyDmC,IAAOO,KAAK9C,EAAKA,MAA1E,UCzGGgF,MA/Cf,WAAgB,IAAD,EACWvG,IAAMwG,SAAmB,CAAC,EAAG,EAAG,IAD3C,mBACNjF,EADM,KACAkF,EADA,OAEezG,IAAMwG,SAAN,qBAFf,mBAENE,EAFM,KAEEC,EAFF,OAGa3G,IAAMwG,SAAS,IAH5B,mBAGNI,EAHM,KAGCC,EAHD,KAIb,OACE,yBAAKhH,UAAU,OACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CACEN,MAAOmH,EACP5H,SAAU,SAAAgI,GAER,IAAIC,EADJJ,EAAUG,GAEV,IACEC,EAASC,SAASF,EAATE,GACT,MAAOC,GAEP,YADAJ,EAASI,EAAGC,SAId,GADAL,EAAS,IACLE,GAAUI,MAAMC,QAAQL,GAAS,CACnC,IAAK,IAAIxG,EAAE,EAAGA,EAAIwG,EAAOvG,OAAQD,IAC/B,GAAyB,kBAAdwG,EAAOxG,GAEhB,YADAsG,EAAS,WAAD,OAAYtG,EAAZ,qBAIZkG,EAAQM,KAGZvH,QAAS,CACP6H,MAAO,WACPC,KAAM,QACNC,aAAa,MAInB,yBAAK1H,UAAU,SACb,kBAAC,EAAD,CAAMsD,MAAO,CAAC,CAAE5B,OAAMwB,MAAO,WAC7B,yBAAKlD,UAAU,SAAS+G,IAE1B,yBAAK/G,UAAU,UAAf,aACY,uBAAG2H,KAAK,+BAAR,YADZ,aACwE,uBAAGA,KAAK,0CAAR,UADxE,qBACqJ,uBAAGA,KAAK,wCAAR,uBClCvIC,QACW,cAA7BjG,OAAOkG,SAASC,UAEe,UAA7BnG,OAAOkG,SAASC,UAEhBnG,OAAOkG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASwC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACL4B,QAAQ5B,MAAMA,EAAMM,c","file":"static/js/main.08e29052.chunk.js","sourcesContent":["// Tried https://github.com/JedWatson/react-codemirror first, but because of numerous small issues,\n// such as https://github.com/JedWatson/react-codemirror/issues/110 and\n// https://github.com/JedWatson/react-codemirror/issues/47 which is the root cause, which hasn't been\n// addressed in a long time, it was easier to just create this component.\nimport * as React from 'react';\nimport CodeMirrorInstance from 'codemirror';\nimport \"codemirror/lib/codemirror.css\";\nimport 'codemirror-one-dark-theme/one-dark.css';\nrequire('codemirror/mode/clike/clike');\n\nexport interface CodeMirrorProps {\n  options?: CodeMirrorInstance.EditorConfiguration;\n  value?: string;\n  onChange?: (newValue: string) => void;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  className?: string;\n}\n\nexport class CodeMirror extends React.Component<CodeMirrorProps, {}> {\n  componentDidMount() {\n    if (!this.container) {\n      return;\n    }\n    const cm = CodeMirrorInstance(this.container, { value: this.props.value || '', ...this.props.options });\n    cm.on('change', this.handleChange);\n    cm.on('keydown', this.handleKeyDown as any);\n    this.codeMirror = cm;\n  }\n  componentWillReceiveProps(nextProps: CodeMirrorProps) {\n    const val = nextProps.value || '';\n    if (this.codeMirror && this.codeMirror.getValue() !== val) {\n      this.codeMirror.setValue(val);\n    }\n  }\n  handleChange = (cm: CodeMirrorInstance.Editor) => {\n    if (this.props.onChange) {\n      this.props.onChange(cm.getValue());\n    }\n  }\n  handleKeyDown = (cm: CodeMirrorInstance.Editor, event: KeyboardEvent) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n  }\n  container: HTMLDivElement | null = null;\n  codeMirror: CodeMirrorInstance.Editor | undefined;\n  shouldComponentUpdate(nextProps: CodeMirrorProps) {\n    return nextProps.className !== this.props.className;\n  }\n  render() {\n    return <div className={this.props.className} ref={e => this.container = e} />;\n  }\n}\n","\n// From: https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0\nexport function hashCode(s: string): number {\n  let h = 0;\n  for(let i = 0; i < s.length; i++) {\n    // tslint:disable-next-line:no-bitwise\n    h = Math.imul(31, h) + s.charCodeAt(i) | 0;\n  }\n\n  return h;\n}\n\nexport function stringToHSL(string: string, saturation: number, light: number) {\n  return `hsl(${hashCode(string) % 360}, ${100*saturation}%, ${100*light}%)`;\n}\n\nexport function arrayReplaceIndex<T>(array: T[], index: number, value: T): T[] {\n  const a2 = [...array];\n  a2[index] = value;\n  return a2;\n}\nexport function arrayInsertIndex<T>(array: T[], index: number, value: T): T[] {\n  return [...array.slice(0, index), value, ...array.slice(index)];\n}\nexport function arrayRemoveIndex<T>(array: T[], index: number): T[] {\n  return [...array.slice(0, index), ...array.slice(index + 1)];\n}\nexport function arrayMove<T>(array: T[], fromIndex: number, toIndex: number): T[] {\n  const arr = array.slice();\n  const [el] = arr.splice(fromIndex, 1);\n  arr.splice(Math.max(toIndex, 0), 0, el);\n  return arr;\n}\n\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max);\n}\nexport function mix(a: number, b: number, p: number) {\n  return a * (1 - p) + b * p;\n}\nexport function interpolate(x: number, x0: number, x1: number, y0: number, y1: number): number {\n  const p = (x - x0) / (x1 - x0);\n  return y0 + p * (y1 - y0);\n}\nexport function interpolateClamped(x: number, x0: number, x1: number, y0: number, y1: number): number {\n  const p = clamp((x - x0) / (x1 - x0), 0, 1);\n  return y0 + p * (y1 - y0);\n}","import * as React from 'react';\nimport './index.css';\nimport lodash from 'lodash';\nimport { stringToHSL, arrayReplaceIndex, clamp, interpolate } from '../Util';\n\ntype PlotWindow = [number, number];\nexport interface PlotLine {\n  data: number[];\n  label: string;\n  color?: string;\n  yMin?: number;\n  yMax?: number;\n}\nfunction windowedData(data: number[], window: PlotWindow | undefined) {\n  if (window) {\n    const start = Math.floor(window[0] * data.length);\n    const end = Math.ceil(window[1] * data.length);\n    return { data: data.slice(start, end), start, end };\n  } {\n    return { data, start: 0, end: data.length };\n  }\n}\nfunction drawPlotLine(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, line: PlotLine, window: PlotWindow | undefined) {\n  let data = windowedData(line.data, window).data;\n  if (data.length === 0) {\n    return;\n  }\n  const dataMin = line.yMin ?? data.reduce((p, x) => Math.min(p, x));\n  const dataMax = line.yMax ?? data.reduce((p, x) => Math.max(p, x));\n  const dataRange = dataMax - dataMin;\n  const canvasCoord = (i: number, value: number): [number, number] => {\n    const x = canvas.width * i / (data.length - 1);\n    const y = canvas.height - canvas.height * (value - dataMin) / dataRange;\n    return [x, y];\n  }\n  ctx.beginPath();\n  ctx.moveTo(...canvasCoord(0, data[0]));\n  ctx.strokeStyle = line.color ?? stringToHSL(line.label, 0.5, 0.5);\n  for (let i=1; i < data.length; i++) {\n    ctx.lineTo(...canvasCoord(i, data[i]));\n  }\n  ctx.stroke();\n}\n\nexport interface PlotProps {\n  title?: string;\n  lines: PlotLine[];\n}\nexport function Plot({ lines, title }: PlotProps) {\n  const dataCanvas = React.createRef<HTMLCanvasElement>();\n  const uiCanvas = React.createRef<HTMLCanvasElement>();\n  const [windowStack, setWindowStack] = React.useState<PlotWindow[]>([]);\n  const [hidden, setHidden] = React.useState<boolean[]>([]);\n  const [hover, setHover] = React.useState<number>();\n  const setHoverThrottled = React.useCallback(lodash.throttle(setHover, 16), [setHover]);\n  const [windowPreview, setWindowPreview] = React.useState<PlotWindow>();\n  React.useEffect(() => {\n    if (dataCanvas.current) {\n      const ctx = dataCanvas.current.getContext('2d')!;\n      ctx.clearRect(0, 0, dataCanvas.current.width, dataCanvas.current.height);\n      for (let i=0; i < lines.length; i++) {\n        if (hidden[i] !== true) {\n          drawPlotLine(dataCanvas.current, ctx, lines[i], lodash.last(windowStack));\n        }\n      }\n    }\n  }, [lines, windowStack, hidden]);\n  React.useEffect(() => {\n    if (uiCanvas.current) {\n      const ctx = uiCanvas.current.getContext('2d')!;\n      ctx.clearRect(0, 0, uiCanvas.current.width, uiCanvas.current.height);\n      if (hover !== undefined) {\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        ctx.moveTo(hover * uiCanvas.current.width, 0);\n        ctx.lineTo(hover * uiCanvas.current.width, uiCanvas.current.height);\n        ctx.stroke();\n      }\n      if (windowPreview) {\n        ctx.fillStyle = `rgba(255, 255, 255, 0.1)`;\n        ctx.fillRect(windowPreview[0] * uiCanvas.current.width, 0,\n          (windowPreview[1] - windowPreview[0]) * uiCanvas.current.width, uiCanvas.current.height);\n      }\n    }\n  }, [hover, windowPreview]);\n  const canvasSize = { width: 600, height: 250 };\n  return <div className=\"Plot\">\n    {title && <b>{title}</b>}\n    <div className=\"PlotCanvases\">\n    <canvas className=\"PlotDataCanvas\" width={canvasSize.width} height={canvasSize.height} ref={dataCanvas} />\n    <canvas\n      className=\"PlotUICanvas\"\n      width={canvasSize.width}\n      height={canvasSize.height}\n      ref={uiCanvas}\n      onMouseMove={e => {\n        const c = e.target as HTMLCanvasElement;\n        const b = c.getBoundingClientRect();\n        setHoverThrottled((e.clientX - b.left) / b.width);\n      }}\n      onMouseOut={e => setHoverThrottled(undefined)}\n      onMouseDown={e => {\n        const c = e.target as HTMLCanvasElement;\n        const b = c.getBoundingClientRect();\n        const windowStart = (e.clientX - b.left) / b.width;\n        setWindowPreview([windowStart, windowStart]);\n        const getWindow = (e: MouseEvent): PlotWindow => {\n          const windowEnd = clamp((e.clientX - b.left) / b.width, 0, 1);\n          if (windowEnd < windowStart) {\n            return [windowEnd, windowStart];\n          } else {\n            return [windowStart, windowEnd];\n          }\n        }\n        const handleMouseMove = (e: MouseEvent) => {\n          e.preventDefault();\n          e.stopPropagation();\n          setWindowPreview(getWindow(e));\n        }\n        const handleMouseUp = (e: MouseEvent) => {\n          let window = getWindow(e);\n          const lastWindow = lodash.last(windowStack);\n          if (lastWindow) {\n            setWindowStack([...windowStack, [\n              interpolate(window[0], 0, 1, lastWindow[0], lastWindow[1]),\n              interpolate(window[1], 0, 1, lastWindow[0], lastWindow[1])\n            ]]);\n          } else {\n            setWindowStack([window]);\n          }\n          setWindowPreview(undefined);\n          document.removeEventListener('mouseup', handleMouseUp);\n          document.removeEventListener('mousemove', handleMouseMove);\n        }\n        document.addEventListener('mouseup', handleMouseUp);\n        document.addEventListener('mousemove', handleMouseMove);\n      }}\n      />\n      {windowStack.length > 0 && <div className=\"PlotZoomOut\"\n          onClick={() => setWindowStack(windowStack.slice(0, windowStack.length - 1))}>\n        Zoom out\n      </div>}\n    </div>\n    {lines.map((line, i) => {\n      const data = windowedData(line.data, lodash.last(windowStack));\n      return <div\n        key={i}\n        className=\"PlotLegendItem\"\n        style={{\n          color: line.color ?? stringToHSL(line.label, 0.5, 0.5),\n          opacity: hidden[i] ? 0.5 : undefined\n        }}\n        onClick={() => setHidden(arrayReplaceIndex(hidden, i, !hidden[i]))}\n        >\n        {line.label}\n        &nbsp;{hover !== undefined ?\n          <span>{Math.round(hover * data.data.length)}: {data.data[Math.round(hover * data.data.length)]}</span>\n          : <span>[{data.start}:{data.data[0]}, ..., {data.end - 1}:{lodash.last(data.data)}]</span>}\n      </div>\n    })}\n  </div>\n}\n","import React from 'react';\nimport { CodeMirror } from './CodeMirror';\nimport './App.css';\nimport { Plot } from './Plot';\n\nfunction App() {\n  const [data, setData] = React.useState<number[]>([3, 1, 2]);\n  const [source, setSource] = React.useState(`return [3, 1, 2];`);\n  const [error, setError] = React.useState('');\n  return (\n    <div className=\"App\">\n      <div className=\"Left\">\n        <CodeMirror\n          value={source}\n          onChange={newSource => {\n            setSource(newSource);\n            let result;\n            try {\n              result = Function(newSource)();\n            } catch (ex) {\n              setError(ex.message);\n              return;\n            }\n            setError('');\n            if (result && Array.isArray(result)) {\n              for (let i=0; i < result.length; i++) {\n                if (typeof result[i] !== 'number') {\n                  setError(`Element ${i} is not a number`);\n                  return;\n                }\n              }\n              setData(result);\n            }\n          }}\n          options={{\n            theme: 'one-dark',\n            mode: 'clike',\n            lineNumbers: true\n          }}\n          />\n      </div>\n      <div className=\"Right\">\n        <Plot lines={[{ data, label: 'Data' }]} />\n        <div className=\"Error\">{error}</div>\n      </div>\n      <div className=\"Header\">\n        jsplot by <a href=\"https://twitter.com/jfnoren\">@jfnoren</a>. Code on <a href=\"https://github.com/FredrikNoren/jsplot\">GitHub</a>. Find it useful? <a href=\"https://www.patreon.com/fredriknoren\">Become a Patron!</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}